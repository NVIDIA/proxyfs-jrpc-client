#! /usr/bin/awk -f
#
# Copyright (c) 2015-2021, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0
#
# Command to parse output from jrpcclient trace
# and count the average duration.
#

BEGIN {
   nsToUs = 1000
   usToMs = 1000
   nsToMs = usToMs * nsToUs

   PROCINFO["sorted_in"] = "@ind_str_asc"

}
{
    # Skip lines that we don't care about
    if ( $0 ~ /Profiler for op:/ )
    {
       #print $0

       if ( $0 ~ /Profiler for op: WRITE/ )
       {
           key = "write"
       }
       else if ( $0 ~ /Profiler for op: READ/ )
       {
           key = "read"
       }
       else if ( $0 ~ /Profiler for op: FLUSH/ )
       {
           key = "flush"
       }
       else if ( $0 ~ /Profiler for op: SOCK_RECEIVE/ )
       {
		   # Purposly skipping these
           key = "sock_rx"
       }
       else
       {
           print "Unsupported log!!"
           key = "broken_fix_me"
       }

       numOps[key] += 1

       # Count fields, total duration is the second-last one
       #print "op is " key ", duration is " $(NF-1)
       totalOpDurationsMs[key] += $(NF-1)/usToMs

        # Parse out individual events, if present
        eventNumber = 1
        for (i=1; i<NF; i++)
        {
            if ($(i) ~ /event/)
            {
                #print eventNumber ": " $i " " $(i+1) " " $(i+2) " " $(i+3)

				# The event numbers is put in the event so that events are output
				# in the same order in which they appear.
				# XXX TODO: Will this break if eventNumber is >= 10?

                if ( $(i+1) ~ /BEFORE_BASE64_ENCODE/ )
                {
                    OpEventMs[key][eventNumber " pre-base64 encoding"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_BASE64_ENCODE/ )
                {
                    OpEventMs[key][eventNumber " base64 encoding"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /RPC_SEND_TIMESTAMP/ )
                {
                    OpEventMs[key][eventNumber " req_send_timestamp"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /BEFORE_RPC_CALL/ )
                {
                    OpEventMs[key][eventNumber " pre-rpc"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /BEFORE_RPC_SEND/ )
                {
                    OpEventMs[key][eventNumber " pre-rpc send"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /RPC_SEND_AFTER_LOCK/ )
                {
                    OpEventMs[key][eventNumber " send_lock"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /RPC_SEND_AFTER_JSON/ )
                {
                    OpEventMs[key][eventNumber " req_send_json"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /RPC_SEND_AFTER_SOCK_WRITE/ )
                {
                    OpEventMs[key][eventNumber " req_send_sock_write"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_RPC_SEND/ )
                {
                    OpEventMs[key][eventNumber " req_send_total"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_SEND_FIELDS/ )
                {
                    OpEventMs[key][eventNumber " req_send_fields"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_SEND_DATA/ )
                {
                    OpEventMs[key][eventNumber " req_send_data"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_READ_ERROR/ )
                {
                    OpEventMs[key][eventNumber " rsp_get_error"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_READ_SIZE/ )
                {
                    OpEventMs[key][eventNumber " rsp_get_size"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_READ_DATA/ )
                {
                    OpEventMs[key][eventNumber " rsp_get_data"] += $(i+3)/usToMs
                }

				# SOCK_RECEIVE events
                if ( $(i+1) ~ /BEFORE_SOCK_READ/ )
                {
                    OpEventMs[key][eventNumber " resp_scheduling"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_SOCK_READ/ )
                {
                    OpEventMs[key][eventNumber " sock_read"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_GET_RESPONSES/ )
                {
                    OpEventMs[key][eventNumber " get_responses"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_JSON_RESPONSES/ )
                {
                    OpEventMs[key][eventNumber " json_decoding"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_COPY_RESPONSES/ )
                {
                    OpEventMs[key][eventNumber " resp_copy"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_RESPONSE_CALLBACKS/ )
                {
                    OpEventMs[key][eventNumber " resp_callback"] += $(i+3)/usToMs
                }

                if ( $(i+1) ~ /RPC_REQ_DELIVERY_TIME/ )
                {
                    OpEventMs[key][eventNumber " req_deliv_timestamp"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /RPC_RESP_SEND_TIME/ )
                {
                    OpEventMs[key][eventNumber " resp_sent_pfs"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_RPC/ )
                {
                    OpEventMs[key][eventNumber " resp_recd"] += $(i+3)/usToMs
                }
                if ( $(i+1) ~ /AFTER_RPC_RX/ )
                {
                    OpEventMs[key][eventNumber " resp_latency"] += $(i+3)/usToMs
                }

	            eventNumber = eventNumber + 1
            }
        }
    }
}
END {
    print " "
    print "                                   Total          Average"
    print "Operation     Quantity           Duration (ms)    duration (ms)"
    print "---------     --------           -------------    -------------"
    for (op in numOps)
    {
		if ( op == "sock_rx" )
		{
			continue
		}

        if ( numOps[op] > 0 )
        {
            printf "%s           %d               %9.2f      %9.2f %8.2f %%\n",
                   op, numOps[op], totalOpDurationsMs[op], totalOpDurationsMs[op]/numOps[key],
                   totalOpDurationsMs[op]/totalOpDurationsMs[op] * 100

			if ( length(OpEventMs[op]) != 0 )
			{
                countedDurationMs = 0
                for (event in OpEventMs[op])
                {
                    #print "OpEventMs event is " event " = " OpEventMs[key][event]
                    printf "  (%-26s)   %9.2f      %9.2f %8.2f %%\n",
                           event, OpEventMs[op][event], OpEventMs[op][event]/numOps[op],
                           OpEventMs[op][event]/totalOpDurationsMs[op] * 100
			    	countedDurationMs += OpEventMs[op][event]
                }

                remainingDurationMs = totalOpDurationsMs[op] - countedDurationMs
                printf "  (%-26s)   %9.2f      %9.2f %8.2f %%\n",
                       "  unaccounted", remainingDurationMs, remainingDurationMs/numOps[op],
                       remainingDurationMs/totalOpDurationsMs[op] * 100
		    }

            print " "
        }
    }
}
